" Put all swap and undo files in a central location
if exists('$CACHEDIR')
	set directory=$CACHEDIR/vim/swap
	set undodir=$CACHEDIR/vim/undo
	set backupdir=$CACHEDIR/vim/backup

	" Prosession sessions
	let g:prosession_dir = expand('$CACHEDIR/vim/session/')
endif

" Set the leader character
let mapleader=';'

set clipboard+=unnamed   " Yank to the system clipboard
set cmdheight=2          " Keep vim from saying 'Press Enter to continue'
set undofile             " Use undo files for persistent undo
set fillchars+=vert:\â”‚   " Make the vertical split bar solid
set hidden               " Use hidden buffers
set ignorecase           " Ignore case when searching...
set smartcase            " ...unless the search is mixed case
set nojoinspaces         " Only insert 1 space after a period when joining lines
set nostartofline        " Don't move to the beginning of a line when jumping
set number               " Show line numbers
set scrolloff=5          " Give the cursor a 5 line margin when scrolling
set shiftwidth=4         " Indent in 4-character wide chunks
set showcmd              " Show commands in the cmd area
set tabstop=4            " Tabs are only 4 characters wide
set formatoptions+=ron   " Automatically format comments and numbered lists
set ruler				 " Show location info in statusline
set nowrap				 " Don't wrap text by default
set wildignorecase       " Case insensitive filename completion

" Toggle cursor crosshairs
map <silent> # :set cursorcolumn! cursorline!<CR>

" Show markers at the beginning and end of non-wrapped lines
set listchars+=precedes:^,extends:$

" Ignore binary files in the standard vim file finder
set wildignore+=*.pyc,*.obj,*.bin,a.out

" <Leader>w to write
map <silent> <Leader>w :w<CR>
map <silent> <Leader>W :w!<CR>

" <Leader>q to quit
map <silent> <Leader>q :qall<CR>
map <silent> <Leader>Q :qall!<CR>

" <Leader>c to close a window
map <silent> <Leader>c :close<CR>

" <Leader>k to kill a buffer (Bd comes from vim-bbye)
map <silent> <Leader>k :Bd<CR>
map <silent> <Leader>K :bd!<CR>

" Show the syntax status of the character under the cursor
map <silent> <Leader>h :echo "hi<" . 
	\ synIDattr(synID(line("."),col("."),1),"name") 
	\ . '> trans<'
	\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
	\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" FZF for selecting files and buffers, regular vim find otherwise
" (https://github.com/junegunn/fzf)
if executable('fzf') && has('nvim') && !has('gui_running')
	set runtimepath+=$FZF_PATH

	" maintain a list of active buffers, sorted by most-recently-used
	let s:fzf_buffers = []

	function! FzfBufAdded()
		let l:name = resolve(expand("<afile>"))
		" Move the current buffer to the top of the list if it's a type we're
		" paying attention to
		if name != "" && name !~ "NERD_tree_.*" && name !~ "NetrwTreeListing.*" && &buftype == ''
			let l:i = index(s:fzf_buffers, name)
			if i != -1
				call remove(s:fzf_buffers, i)
			endif
			let s:fzf_buffers = insert(s:fzf_buffers, name)
		endif
	endfunction

	function! FzfBufDeleted()
		" Remove the buffer being deleted from the list
		let l:name = resolve(expand("<afile>"))
		if name != ""
			let l:idx = index(s:fzf_buffers, name)
			if idx != -1
				call remove(s:fzf_buffers, idx)
			endif
		endif
	endfunction

	augroup fzfbuf
		autocmd!
		autocmd BufAdd,BufEnter * call FzfBufAdded()
		autocmd BufDelete * call FzfBufDeleted()
	augroup END

	command! FZFFiles call fzf#run({
		\'options': '--tiebreak=end',
		\'sink' : 'e',
		\'down' : 8,
		\})
	command! FZFBuffers call fzf#run({
		\'source': s:fzf_buffers,
		\'sink' : 'e',
		\'down' : 8,
		\})
	command! FZFGit call fzf#run({
		\'source': 'git ls-tree -r --name-only HEAD',
		\'sink' : 'e',
		\'options' : '-m',
		\'down' : 8,
		\})

	let g:fzf_tmux_height=8
	map <silent> <Leader>f :FZF<CR>
	map <silent> <Leader>b :FZFBuffers<CR>
	map <silent> <Leader>g :FZFGit<CR>
else
	map <Leader>f :find 
	map <silent> <Leader>b :ls<CR> 
endif

" Ag for grepping (https://github.com/ggreer/the_silver_searcher)
if executable('ag')
	set grepprg=ag\ --nogroup\ --nocolor
endif

" Better start/end atching
runtime! macros/matchit.vim

" Easier navigation of text files
function! TextMode()
	setlocal wrap linebreak nolist display+=lastline
	map <buffer> <silent> k gk
	map <buffer> <silent> j gj
	map <buffer> <silent> 0 g0
	map <buffer> <silent> $ g$
endfunction

" General autocommands
augroup vimrc
	autocmd!

	" Make text files easier to work with
	autocmd FileType text call TextMode()
	autocmd FileType textile call TextMode()
	autocmd FileType markdown call TextMode()
	autocmd FileType html call TextMode()

	" Automatically close preview windows after autocompletion
	autocmd CompleteDone * pclose

	" Identify files in a zsh/functions directory as zsh scripts
	autocmd BufRead */zsh/functions/* set filetype=zsh

	" When editing a file, jump back to the last edited line if it makes sense
	" to do so
	autocmd BufReadPost *
		\ if line("'\"") > 1 && line("'\"") <= line("$") |
		\     execute "normal! g'\"" |
		\ endif
augroup END

" EasyAlign
" ---------------------------------------------------------------------
" To align end-of-line comments, do <Leader>a-<space>
map <silent> <Leader>a <Plug>(EasyAlign)

" Flagship
" ---------------------------------------------------------------------
" Don't show the tabline when using Flagship
let g:tablabel=''

" Go
" ---------------------------------------------------------------------
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1

" JavaScript
" ---------------------------------------------------------------------
let g:html_indent_script1 = 'inc'
let g:html_indent_style1 = 'inc'
let g:js_indent_flat_switch = 1

" json
" ---------------------------------------------------------------------
" Don't conceal quotes around JSON properties
let g:vim_json_syntax_conceal = 0

" NERDTree
" ---------------------------------------------------------------------
let g:NERDTreeAutoDeleteBuffer=1
let g:NERDTreeMinimalUI=1
let g:NERDTreeDirArrows=1
map <silent> <Leader>n :NERDTreeToggle<CR>

" Neovim
" ---------------------------------------------------------------------
if has('nvim')
	" <Leader>e to escape into command mode in an nvim terminal
	tnoremap <Leader>e <C-\><C-n>

	" Tell Neovim.app which Python to use
	if exists('/usr/local/bin/python')
		let g:python_host_prog='/usr/local/bin/python'
	endif
	if exists('/usr/local/bin/python3')
		let g:python3_host_prog='/usr/local/bin/python3'
	endif
endif

" Neomake
" ---------------------------------------------------------------------
" Better highlighting for signs
let g:neomake_warning_sign = { 'texthl': 'WarningSign' }
let g:neomake_error_sign = { 'texthl': 'ErrorSign' }
let g:neomake_list_height = 5

augroup neomake_write
	autocmd!
	autocmd BufWritePost * Neomake
augroup END

" Supertab
" ---------------------------------------------------------------------
let g:SuperTabDefaultCompletionType = 'context'

" undotree
" --------------------------------------------------------------------- 
nnoremap <Leader>u :UndotreeToggle<CR>

" Plugins
" ---------------------------------------------------------------------
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-commentary'           " gc for commenting code blocks
Plug 'tpope/vim-flagship'             " Status line configuration
Plug 'tpope/vim-fugitive'             " Git utilities
Plug 'tpope/vim-vinegar'              " Netrw enhancments
Plug 'moll/vim-bbye'                  " Preserve layout when closing buffers
Plug 'christoomey/vim-tmux-navigator' " Easy movement between vim and tmux panes
Plug 'benekastah/neomake'             " Asynchronous make and error highlighter
Plug 'junegunn/vim-easy-align'        " Easy vertical alignment of code elements
Plug 'ervandew/supertab'              " Use tab for autocompletion
Plug 'mbbill/undotree'                " Visualize the undo tree

" File browsing
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" Snippet management
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" Session management
Plug 'tpope/vim-obsession' | Plug 'dhruvasagar/vim-prosession'

" Filetype plugins
Plug 'digitaltoad/vim-jade', { 'for': 'jade' }
Plug 'Quramy/tsuquyomi', { 'for': 'typescript', 'do': 'npm install' }
Plug 'applescript.vim', { 'for': 'applescript' }
Plug 'Textile-for-VIM', { 'for': 'textile' }
Plug 'dag/vim-fish', { 'for': 'fish' }
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'jason0x43/vim-js-indent', { 'for':  [ 'javascript', 'typescript', 'html' ] }
Plug 'jason0x43/vim-js-syntax', { 'for':  [ 'javascript', 'html' ] }
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
Plug 'tpope/vim-classpath', { 'for': 'java' }
Plug 'wavded/vim-stylus', { 'for': 'stylus' }
Plug 'marijnh/tern_for_vim', { 'for': [ 'javascript', 'html' ], 'do': 'npm install' }

" Load the go plugin if go is available
if executable('go')
	Plug 'fatih/vim-go', { 'for': 'go' }
endif

" Load all the plugins
call plug#end()

" Turn on all the filetype goodness
" ---------------------------------------------------------------------
filetype plugin indent on
syn on
colorscheme solarized
