" Check for vim-plug; install if missing
let plugpath = expand('<sfile>:p:h') . '/autoload/plug.vim'
if !filereadable(plugpath)
	if executable('curl')
		call system('curl -fLo ' . shellescape(plugpath) . ' --create-dirs ' . 
			\ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
		if v:shell_error
			echo "Error downloading vim-plug. Please install it manually.\n"
			exit
		endif
	else
		echo "Unable to download vim-plug. Please install it manually or install curl.\n"
		exit
	endif
endif

" Put all swap and undo files in a central location
if exists('$CACHEDIR')
	set directory=$CACHEDIR/vim/swap//
	set undodir=$CACHEDIR/vim/undo//
	set backupdir=$CACHEDIR/vim/backup//

	if !has('nvim')
		set viminfo+=n$CACHEDIR/vim/viminfo
	endif
endif

" Set the leader character
let mapleader=';'

set backupcopy=yes           " Overwrite the original file when saving
set breakindent              " When lines are broken by linebreak, maintain indent
set clipboard+=unnamed       " Yank to the system clipboard. 'unnamed' works in neovim _and_ MacVim
set cmdheight=2              " Keep vim from saying 'Press Enter to continue'
set undofile                 " Use undo files for persistent undo
set fillchars+=vert:\│       " Make the vertical split bar solid
set hidden                   " Use hidden buffers
set inccommand=nosplit       " Show live substitutions
set ignorecase               " Ignore case when searching...
set smartcase                " ...unless the search is mixed case
set nojoinspaces             " Only insert 1 space after a period when joining lines
set nostartofline            " Don't move to the beginning of a line when jumping
set number                   " Show line numbers
set completeopt-=preview     " Don't show the preview window when completing		     
set scrolloff=5              " Give the cursor a 5 line margin when scrolling
set shiftwidth=4             " Indent in 4-character wide chunks
set showcmd                  " Show commands in the cmd area
set tabstop=4                " Tabs are only 4 characters wide
set formatoptions+=ron       " Automatically format comments and numbered lists
set ruler				     " Show location info in statusline
set nowrap				     " Don't wrap text by default
set wildignorecase           " Case insensitive filename completion
set lazyredraw               " Redraw less frequently
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
  \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
  \,sm:block-blinkwait175-blinkoff150-blinkon175

" Toggle cursor crosshairs
map <silent> # :set cursorcolumn! cursorline!<CR>

" Show markers at the beginning and end of non-wrapped lines
set listchars+=precedes:^,extends:$

" Ignore binary files in the standard vim file finder
set wildignore+=*.pyc,*.obj,*.bin,a.out

" <Leader>w to write
map <silent> <Leader>w :w<CR>
map <silent> <Leader>W :w!<CR>

" <Leader>q to quit
map <silent> <Leader>q :qall<CR>
map <silent> <Leader>Q :qall!<CR>

" <Leader>c to close a window
map <silent> <Leader>c :close<CR>

" <Leader>k to kill a buffer (Bd comes from vim-bbye)
map <silent> <Leader>k :Bd<CR>
map <silent> <Leader>K :bd!<CR>

" <Leader>space to clear search highlights
map <silent> <Leader><Space> :nohlsearch<CR>

" Show the syntax status of the character under the cursor
map <silent> <Leader>h :echo "hi<" . 
	\ synIDattr(synID(line("."),col("."),1),"name") 
	\ . '> trans<'
	\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
	\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Files and buffers
map <Leader>f :find 
map <silent> <Leader>b :ls<CR> 

" Ag for grepping (https://github.com/ggreer/the_silver_searcher)
if executable('ag')
	set grepprg=ag\ --nogroup\ --nocolor
endif

" Better start/end atching
runtime! macros/matchit.vim

" Easier navigation of text files
function! TextMode()
	setlocal wrap linebreak nolist display+=lastline
	map <buffer> <silent> k gk
	map <buffer> <silent> j gj
	map <buffer> <silent> 0 g0
	map <buffer> <silent> $ g$
endfunction

" General autocommands
augroup vimrc
	autocmd!

	" Make text files easier to work with
	autocmd FileType text call TextMode()
	autocmd FileType textile call TextMode()
	autocmd FileType markdown call TextMode()
	autocmd FileType html call TextMode()

	" Wrap lines in quickfix windows
	autocmd FileType qf setlocal wrap linebreak nolist breakindent breakindentopt=shift:2

	" Always start at the top of git commit messages
	autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])

	" Close help files and quickfix panes on 'q'
	autocmd FileType help nnoremap <silent> q :bd<CR>
	autocmd FileType qf nnoremap <silent> q :bd<CR>

	autocmd BufEnter * syntax sync fromstart

	" Automatically close preview windows after autocompletion
	autocmd CompleteDone * pclose

	" Identify files in a zsh/functions directory as zsh scripts
	autocmd BufRead */zsh/functions/* set filetype=zsh

	" ejs is HTML
	autocmd BufRead *.ejs set filetype=html

	" When editing a file, jump back to the last edited line if it makes sense
	" to do so
	autocmd BufReadPost *
		\ if line("'\"") > 1 && line("'\"") <= line("$") |
		\     execute "normal! g'\"" |
		\ endif

	" move line mappings
	" ∆ is <A-j> on macOS
	" ˚ is <A-k> on macOS
	nnoremap ∆ :m .+1<cr>==
	nnoremap ˚ :m .-2<cr>==
	inoremap ∆ <Esc>:m .+1<cr>==gi
	inoremap ˚ <Esc>:m .-2<cr>==gi
	vnoremap ∆ :m '>+1<cr>gv=gv
	vnoremap ˚ :m '<-2<cr>gv=gv
augroup END

" Ale
" ---------------------------------------------------------------------
"  Rely on YCM for typescript linting
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': [],
\   'go': ['gofmt', 'golint', 'go vet']
\}
let g:ale_fixers = {
	\   'typescript': [ 'prettier' ],
	\   'javascript': [ 'prettier' ],
	\   'json': [ 'prettier' ],
	\   'scss': [ 'prettier' ],
	\   'stylus': [ 'prettier' ],
	\}
let g:ale_javascript_prettier_use_local_config = 1

let g:ale_change_sign_column_color = 1
let g:ale_sign_error = '✖'
let g:ale_sign_warning = '⚠'
map <silent> <Leader>t :ALEFix<cr>

" EasyAlign
" ---------------------------------------------------------------------
" To align end-of-line comments, do <Leader>a-<space>
map <silent> <Leader>a <Plug>(EasyAlign)

" Flagship
" ---------------------------------------------------------------------
" Don't show the tabline when using Flagship
let g:tablabel=''

" fzf
" ---------------------------------------------------------------------
let g:fzf_layout = { 'down': 10 }

" Go
" ---------------------------------------------------------------------
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1
let g:go_metalinter_excludes = ['errcheck']

" JavaScript
" ---------------------------------------------------------------------
let g:html_indent_script1 = 'inc'
let g:html_indent_style1 = 'inc'
let g:js_indent_flat_switch = 1

" json
" ---------------------------------------------------------------------
" Don't conceal quotes around JSON properties
let g:vim_json_syntax_conceal = 0

" markdown
" ---------------------------------------------------------------------
let g:markdown_fenced_languages = [
\	'html',
\	'python',
\	'sh',
\	'js=javascript'
\ ]

" miniyank
" ---------------------------------------------------------------------
" map p <Plug>(miniyank-autoput)
" map P <Plug>(miniyank-autoPut)

" NERDTree
" ---------------------------------------------------------------------
let g:NERDTreeAutoDeleteBuffer=1
let g:NERDTreeMinimalUI=1
let g:NERDTreeWinSize=40
let g:NERDTreeDirArrowExpandable = '▷'
let g:NERDTreeDirArrowCollapsible = '▼'
let g:NERDTreeRespectWildIgnore = 1

function! ToggleNerdTree()
	if @% != "" && (!exists("g:NERDTree") || (g:NERDTree.ExistsForTab() && !g:NERDTree.IsOpen()))
		:NERDTreeFind
	else 
		:NERDTreeToggle
	endif
endfunction

map <silent> <Leader>n :call ToggleNerdTree()<CR>

" Neovim
" ---------------------------------------------------------------------
if has('nvim')
	" <Leader>e to escape into command mode in an nvim terminal
	tnoremap <leader>e <C-\><C-n>

	" Always enter insert mode when switching to a terminal
	autocmd BufWinEnter,WinEnter term://* startinsert

	" Tell Neovim.app which Python to use
	if executable('/usr/local/bin/python2')
		let g:python_host_prog='/usr/local/bin/python2'
	endif
	if executable('/usr/local/bin/python3')
		let g:python3_host_prog='/usr/local/bin/python3'
	endif

	" Note -- Don't enable termguicolors because it's all around better for
	" neovim to use the existing terminal palette rather than managing its
	" own. For example, when using the terminal palette we automatically get
	" things like tmux pane focus dimming.
endif

" tig
" ---------------------------------------------------------------------
if has('nvim')
	function! s:tig()
		let s:callback = {}
		let current = expand('%')

		function! s:callback.on_exit(job_id, code, event)
			bw!
		endfunction

		below new
		call termopen('tig status', s:callback)
		startinsert
	endfunction

	command! Tig call s:tig()
endif

" undotree
" --------------------------------------------------------------------- 
nnoremap <Leader>u :UndotreeToggle<CR>

" YouCompleteMe
" --------------------------------------------------------------------- 
let g:ycm_always_populate_location_list = 1
map <Leader>e :YcmDiags<CR> 
let g:ycm_error_symbol = '✖'
let g:ycm_warning_symbol = '!!'
function! s:CustomizeYcmLocationWindow()
	10wincmd _
endfunction
autocmd User YcmLocationOpened call s:CustomizeYcmLocationWindow()

" Plugins
" ---------------------------------------------------------------------
call plug#begin('~/.vim/plugged')

Plug 'sgur/vim-editorconfig'          " EditorConfig
Plug 'tpope/vim-commentary'           " gc for commenting code blocks
Plug 'tpope/vim-eunuch'               " POSIX command wrappers
Plug 'tpope/vim-flagship'             " Status line configuration
Plug 'tpope/vim-fugitive'             " Git utilities
Plug 'tpope/vim-unimpaired'           " useful pairs of mappings
Plug 'tpope/vim-repeat'               " support for repeating mapped commands
Plug 'tpope/vim-surround'             " for manipulating parens and such
Plug 'moll/vim-bbye'                  " Preserve layout when closing buffers
Plug 'christoomey/vim-tmux-navigator' " Easy movement between vim and tmux panes
Plug 'w0rp/ale'                		  " Asynchronous linting
Plug 'junegunn/vim-easy-align'        " Easy vertical alignment of code elements
Plug 'mbbill/undotree'                " Visualize the undo tree
" Plug 'bfredl/nvim-miniyank'           " Block Cut-and-paste

" Completion
Plug 'Valloric/YouCompleteMe'

" File browsing
Plug 'scrooloose/nerdtree', { 'on': [ 'NERDTreeToggle', 'NERDTreeFind' ] }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': [ 'NERDTreeToggle', 'NERDTreeFind' ] }
Plug 'jason0x43/vim-wildgitignore'

" Session management
Plug 'tpope/vim-obsession'

" Filetype plugins
Plug 'keith/swift.vim', { 'for': 'swift' }
Plug 'digitaltoad/vim-jade', { 'for': 'jade' }
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'vim-scripts/applescript.vim', { 'for': 'applescript' }
Plug 'vim-scripts/Textile-for-VIM', { 'for': 'textile' }
Plug 'dag/vim-fish', { 'for': 'fish' }
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'jason0x43/vim-js-indent', { 'for':  [ 'javascript', 'typescript', 'html', 'jsp' ] }
Plug 'jason0x43/vim-js-syntax', { 'for':  [ 'javascript', 'html' ] }
Plug 'mxw/vim-jsx', {'for': 'javascript.jsx'} 
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
Plug 'mzlogin/vim-markdown-toc', { 'for': 'markdown' }
Plug 'tpope/vim-classpath', { 'for': 'java' }
Plug 'wavded/vim-stylus', { 'for': 'stylus' }

" Load the go plugin if go is available
if executable('go')
	Plug 'fatih/vim-go', { 'for': 'go' }
endif

" Load the fzf plugin if fzf is available
" if executable('fzf') && has('nvim') && !has('gui_running')
if executable('fzf') && has('nvim')
	Plug $FZF_PATH
	Plug 'junegunn/fzf.vim'

	" These mappings depend on the FZF plugin being loaded
	map <silent> <Leader>f :Files<CR>
	map <silent> <Leader>b :Buffers<CR>
	" Show untracked files, too
	map <silent> <Leader>g :GFiles --cached --others --exclude-standard<CR>
	map <silent> <Leader>s :Snippets<CR>
	map <silent> <Leader>l :BLines<CR>
endif

" Load all the plugins
call plug#end()

" Turn on all the filetype goodness
" ---------------------------------------------------------------------
filetype plugin indent on
syn on
colorscheme solarized
