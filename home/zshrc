# Functions ##############################################################

# Autoload all user shell functions, following symlinks
if [[ -d $DOTFILES/zsh/functions ]]; then
	for func in $DOTFILES/zsh/functions/*(:t); autoload -U $func
fi

# Color ##################################################################

# Turn on color for everything
zstyle ':zconf:*:*' color 'yes'
autoload -Uz colors && colors

# Terminal theme
if [[ $TERM_PROGRAM == iTerm.app ]]; then
	termbg=$CACHEDIR/termbg

	# Commands to be run when the colorscheme is changed
	set -A on_scheme_change

	# Set a color in the color palette. The first arg is the cell to set
	# (foreground, background, ANSI0, ANSI1, etc.), the second is the color as
	# a 6-digit hex value. More information about iTerm2's proprietary codes is
	# at https://iterm2.com/documentation-escape-codes.html.
	if [[ -n "$TMUX" ]]; then
		# The escape codes must be prefixed when running in tmux
		function set_color() {
			echo -ne "\033Ptmux;\033\033]P${1}${2}\033\\"
		}

		function set_tmux_theme() {
			tmux source-file $DOTFILES/tmux/$1.conf > /dev/null
		}
		on_scheme_change+=set_tmux_theme
	else
		function set_color() {
			echo -ne "\033]P${1}${2}\033\\"
		}
	fi

	# Set the active color scheme
	function set_scheme() {
		echo $1 >! $termbg
	}
	on_scheme_change+=set_scheme

	# Solarized palette
	typeset -A PALETTE
	PALETTE=(
		base03  "002b36"
		base02  "073642"
		base01  "586e75"
		base00  "657b83"
		base0   "839496"
		base1   "93a1a1"
		base2   "eee8d5"
		base3   "fdf6e3"
		yellow  "b58900"
		orange  "cb4b16"
		red     "dc322f"
		magenta "d33682"
		violet  "6c71c4"
		blue    "268bd2"
		cyan    "2aa198"
		green   "859900"
	)

	# Setup the palette
	function set_palette() {
		set_color '0' "$PALETTE[base02]"
		set_color '1' "$PALETTE[red]"
		set_color '2' "$PALETTE[green]"
		set_color '3' "$PALETTE[yellow]"
		set_color '4' "$PALETTE[blue]"
		set_color '5' "$PALETTE[magenta]"
		set_color '6' "$PALETTE[cyan]"
		set_color '7' "$PALETTE[base2]"
		set_color '8' "$PALETTE[base03]"
		set_color '9' "$PALETTE[orange]"
		set_color 'A' "$PALETTE[base01]"
		set_color 'B' "$PALETTE[base00]"
		set_color 'C' "$PALETTE[base0]"
		set_color 'D' "$PALETTE[violet]"
		set_color 'E' "$PALETTE[base1]"
		set_color 'F' "$PALETTE[base3]"
	}

	# Enable Solarized Light
	function light() {
		set_palette
		set_color 'g' "$PALETTE[base00]"
		set_color 'h' "$PALETTE[base3]"
		set_color 'i' "$PALETTE[base01]"
		set_color 'j' "$PALETTE[base2]"
		set_color 'k' "$PALETTE[base00]"
		for callback in $on_scheme_change; eval $callback 'light'
		[[ $1 != "norefresh" ]] && notify_theme
	}

	# Enable Solarized Dark
	function dark() {
		set_palette
		set_color 'g' "$PALETTE[base0]"
		set_color 'h' "$PALETTE[base03]"
		set_color 'i' "$PALETTE[base1]"
		set_color 'j' "$PALETTE[base02]"
		set_color 'k' "$PALETTE[base0]"
		for callback in $on_scheme_change; eval $callback 'dark'
		[[ $1 != "norefresh" ]] && notify_theme
	}

	# Setup a signal trap; when this signal is seen the shell will update its
	# theme-related environment variables
	function TRAPUSR2() {
		local theme
		[ -f ~/.cache/termbg ] && theme=$(cat ~/.cache/termbg)
		if [[ $theme == "light" ]] || [[ $theme == "dark" ]]; then
			for callback in $on_scheme_change; eval $callback $theme
		fi
	}

	# Send a USR2 signal to every zsh instance under the same parent as this
	# instance, causing them to run the TRAPUSR2 function above
	function notify_theme() {
		local -a pids
		pids=($(pgrep -P $PPID zsh))
		kill -USR2 $pids
	}
fi

# Completions ############################################################

# Load and initialize the completion system, ignoring insecure directories
fpath=($fpath /usr/local/share/zsh-completions)
export ZCOMPFILE=$CACHEDIR/zsh/zcompdump
autoload -Uz compinit && compinit -i -d $ZCOMPFILE

# Use caching to make completion for commands with many options usable
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "${ZCACHEDIR}"

# Case-insensitive (all), partial-word, and then substring completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Group matches and describe
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

# Fuzzy match mistyped completions
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# Increase the number of errors based on the length of the typed word
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'

# Don't complete unavailable commands
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# Array completion element sorting
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Directories
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true

# History
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

# Environmental Variables
zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}

# Populate hostname completion
zstyle -e ':completion:*:hosts' hosts 'reply=(
	${=${=${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) 2>/dev/null)"}%%[#| ]*}//\]:[0-9]*/ }//,/ }//\[/ }
	${=${(f)"$(cat /etc/hosts(|)(N) <<(ypcat hosts 2>/dev/null))"}%%\#*}
	${=${${${${(@M)${(f)"$(cat ~/.ssh/config 2>/dev/null)"}:#Host *}#Host }:#*\**}:#*\?*}}
)'

# Don't complete uninteresting users...
zstyle ':completion:*:*:*:users' ignored-patterns \
	adm amanda apache avahi beaglidx bin cacti canna clamav daemon \
	dbus distcache dovecot fax ftp games gdm gkrellmd gopher \
	hacluster haldaemon halt hsqldb ident junkbust ldap lp mail \
	mailman mailnull mldonkey mysql nagios \
	named netdump news nfsnobody nobody nscd ntp nut nx openvpn \
	operator pcap postfix postgres privoxy pulse pvm quagga radvd \
	rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs '_*'

# ... unless we really want to
zstyle '*' single-ignored show

# Ignore multiple entries
zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
zstyle ':completion:*:rm:*' file-patterns '*:all-files'

# kill
zstyle ':completion:*:*:*:*:processes' command 'ps -u $USER -o pid,user,comm -w'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*' insert-ids single

# man
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

# SSH/SCP/RSYNC
zstyle ':completion:*:(scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:ssh:*' group-order users hosts-domain hosts-host users hosts-ipaddr
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

# Key bindings ###########################################################

# Define friendly names for keycodes
typeset -gA key_info
key_info=(
	'Control'      '\C-'
	'ControlLeft'  '\e[1;5D \e[5D \e\e[D \eOd'
	'ControlRight' '\e[1;5C \e[5C \e\e[C \eOc'
	'Escape'       '\e'
	'Meta'         '\M-'
	'Backspace'    "^?"
	'Delete'       "^[[3~"
	'F1'           "$terminfo[kf1]"
	'F2'           "$terminfo[kf2]"
	'F3'           "$terminfo[kf3]"
	'F4'           "$terminfo[kf4]"
	'F5'           "$terminfo[kf5]"
	'F6'           "$terminfo[kf6]"
	'F7'           "$terminfo[kf7]"
	'F8'           "$terminfo[kf8]"
	'F9'           "$terminfo[kf9]"
	'F10'          "$terminfo[kf10]"
	'F11'          "$terminfo[kf11]"
	'F12'          "$terminfo[kf12]"
	'Insert'       "$terminfo[kich1]"
	'Home'         "$terminfo[khome]"
	'PageUp'       "$terminfo[kpp]"
	'End'          "$terminfo[kend]"
	'PageDown'     "$terminfo[knp]"
	'Up'           "$terminfo[kcuu1]"
	'Left'         "$terminfo[kcub1]"
	'Down'         "$terminfo[kcud1]"
	'Right'        "$terminfo[kcuf1]"
	'BackTab'      "$terminfo[kcbt]"
)

# VI keybindings
bindkey -v
bindkey -M vicmd "k" history-substring-search-up
bindkey -M vicmd "j" history-substring-search-down

# Make the up and down arrows do history searching
for keymap in 'viins'; do
	bindkey -M "$keymap" "$key_info[Up]" history-substring-search-up
	bindkey -M "$keymap" "$key_info[Down]" history-substring-search-down
done

# Aliases ################################################################

# Clear existing aliases
unalias -m '*'

# Default command options
alias cp='cp -i'
alias ln='ln -i'
alias mkdir='mkdir -p'
alias mv='mv -i'
alias rm='rm -i'
alias type='type -a'

# Shortcuts
alias agl='ag -l'
alias back='popd'
alias help='run-help'

# Disable certificate check for wget
alias wget='wget --no-check-certificate'

# Git short-cuts
alias ga='git add'
alias gb='git branch'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gc='git commit --verbose'
alias gca='git commit --verbose --all'
alias gcb='git checkout -b'
alias gco='git checkout'
alias gcp='git cherry-pick --ff'
alias gcpn='git cherry-pick --no-commit'
alias gd='git diff'
alias gdh='git diff HEAD'
alias gds='git diff --stat'
alias gdv='git difftool'
alias gg='git grep'
alias ggi='git grep --ignore-case'
alias ggil='git grep --ignore-case --files-with-matches'
alias ggl='git grep --files-with-matches'
alias gid='git rev-parse HEAD'
alias gl='git lg'
alias glb='git lgb'
alias glg='git log --topo-order --pretty=format:${_git_log_medium_format}'
alias gls='git ls-files'
alias grc='git rebase --continue'
alias grv='git remote -v'
alias gs='git st'
alias tiga='tig --all'

# Pretty print json
alias json='python -m json.tool'

# Disable correction for some commands
alias cd="nocorrect ${aliases[cd]:-cd}"
alias cp="nocorrect ${aliases[cp]:-cp}"
alias gcc="nocorrect ${aliases[gcc]:-gcc}"
alias grep="nocorrect ${aliases[grep]:-grep}"
alias gulp="nocorrect ${aliases[gulp]:-gulp}"
alias ln="nocorrect ${aliases[ln]:-ln}"
alias man="nocorrect ${aliases[man]:-man}"
alias mkdir="nocorrect ${aliases[mkdir]:-mkdir}"
alias mv="nocorrect ${aliases[mv]:-mv}"
alias rm="nocorrect ${aliases[rm]:-rm}"
alias vim="nocorrect ${aliases[vim]:-vim}"
alias tsd="nocorrect ${aliases[tsd]:-tsd}"
alias jake="nocorrect ${aliases[jake]:-jake}"

# Disable globbing for some commands
alias bower="noglob ${aliases[bower]:-bower}"
alias find="noglob ${aliases[find]:-find}"
alias find="noglob ${aliases[ff]:-ff}"
alias ftp="noglob ${aliases[ftp]:-ftp}"
alias history="noglob ${aliases[history]:-history}"
alias rsync="noglob ${aliases[rsync]:-rsync}"
alias scp="noglob ${aliases[scp]:-scp}"
alias sftp="noglob ${aliases[sftp]:-sftp}"

# Colorize ls
if zstyle -t ':zconf:module:utility:ls' color; then
	# Define colors for BSD ls
	export LSCOLORS='exfxcxdxbxGxDxabagacad'

	# Define colors for the completion system
	export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=36;01:cd=33;01:su=31;40;07:sg=36;40;07:tw=32;40;07:ow=33;40;07:'

	alias ls='ls -G'
else
	alias ls='ls -F'
fi

# Other ls aliases
alias l='ls -1A'         # Lists in one column, hidden files
alias ll='ls -lh'        # Lists human readable sizes
alias la='ll -A'         # Lists human readable sizes, hidden files

# Space usage
alias df='df -kh'
alias du='du -kh'

# Shell options ##########################################################

# Navigation
setopt   AUTO_CD                # Change to a directory without typing cd
setopt   AUTO_NAME_DIRS         # Auto add variable-stored paths to ~ list
setopt   AUTO_PUSHD             # Push the old directory onto the stack on cd
setopt   CDABLE_VARS            # Change directory to a path stored in a variable
setopt   EXTENDED_GLOB          # Use extended globbing syntax
setopt   MULTIOS                # Write to multiple descriptors
setopt   PUSHD_IGNORE_DUPS      # Do not store duplicates in the stack
setopt   PUSHD_SILENT           # Do not print the directory stack after pushd or popd
setopt   PUSHD_TO_HOME          # Push to home directory when no argument is given
unsetopt CLOBBER                # Don't overwrite existing files with > and >>

# Files and commands
setopt   BRACE_CCL              # Allow brace character class list expansion
setopt   COMBINING_CHARS        # Combine zero-length punctuation characters (accents) with the base character
setopt   CORRECT                # Correct mis-typed commands
setopt   RC_QUOTES              # Allow 'Henry''s Garage' instead of 'Henry'\''s Garage'
unsetopt MAIL_WARNING           # Don't print a warning message if a mail file has been accessed

# Jobs
setopt   AUTO_RESUME            # Attempt to resume existing job before creating a new process
setopt   LONG_LIST_JOBS         # List jobs in the long format by default
setopt   NOTIFY                 # Report status of background jobs immediately
unsetopt BG_NICE                # Don't run all background jobs at a lower priority
unsetopt CHECK_JOBS             # Don't report on jobs when shell exit
unsetopt HUP                    # Don't kill jobs on shell exit

# History
setopt   BANG_HIST              # Treat the '!' character specially during expansion
setopt   EXTENDED_HISTORY       # Write the history file in the ':start:elapsed;command' format
setopt   HIST_BEEP              # Beep when accessing non-existent history
setopt   HIST_EXPIRE_DUPS_FIRST # Expire a duplicate event first when trimming history
setopt   HIST_FIND_NO_DUPS      # Do not display a previously found event
setopt   HIST_IGNORE_ALL_DUPS   # Delete an old recorded event if a new event is a duplicate
setopt   HIST_IGNORE_DUPS       # Do not record an event that was just recorded again
setopt   HIST_IGNORE_SPACE      # Do not record an event starting with a space
setopt   HIST_SAVE_NO_DUPS      # Do not write a duplicate event to the history file
setopt   HIST_VERIFY            # Do not execute immediately upon history expansion
setopt   INC_APPEND_HISTORY     # Write to the history file immediately, not when the shell exits
setopt   SHARE_HISTORY          # Share history between all sessions

# Completion
setopt   ALWAYS_TO_END          # Move cursor to the end of a completed word
setopt   AUTO_LIST              # Automatically list choices on ambiguous completion
setopt   AUTO_MENU              # Show completion menu on a succesive tab press
setopt   AUTO_PARAM_SLASH       # If completed parameter is a directory, add a trailing slash
setopt   COMPLETE_IN_WORD       # Complete from both ends of a word
setopt   PATH_DIRS              # Perform path search even on command names with slashes
unsetopt CASE_GLOB              # Make globbing case insensitive
unsetopt FLOW_CONTROL           # Disable start/stop characters in shell editor
unsetopt MENU_COMPLETE          # Do not autoselect the first completion entry

# History ################################################################

HISTFILE="${ZDOTDIR:-$HOME}/.zhistory"  # The path to the history file
HISTSIZE=10000                # The maximum number of events to save in the internal history
SAVEHIST=10000                # The maximum number of events to save in the history file

# Lists the ten most used commands
alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"

# Node ###################################################################

# Load NPM completion
if [[ $+commands[npm] ]]; then
	cache_file="$ZCACHEDIR/npm.zsh"

	if [[ "$commands[npm]" -nt "$cache_file" || ! -s "$cache_file" ]]; then
		# npm is slow; cache its output.
		npm completion >! "$cache_file" 2> /dev/null
	fi

	source "$cache_file"
	unset cache_file
fi

# nvm
nvmsh="$(brew --prefix nvm)/nvm.sh"
if [[ -e "$nvmsh" ]]; then
	export NVM_DIR=~/.nvm
	source $nvmsh
fi
unset nvmsh

# Neovim #################################################################

if is_callable 'nvim'; then
	# Automatically run vim's refreshColors.py when the colorscheme is changed
	if [[ -e "$HOME/.vim/refreshColors.py" ]]; then
		on_scheme_change+='python ~/.vim/refreshColors.py'
	fi
fi

# fzf ####################################################################

if is_callable 'fzf'; then
	# Setup
	if [[ -z "$FZF_DEFAULT_OPTS" ]]; then
		export FZF_DEFAULT_OPTS=--no-color
	fi
	export FZF_PATH=`echo $(which fzf)(:A:h:h)`

	# Completion (this doesn't work well with autosuggestions at the moment)
	# source $FZF_PATH/shell/completion.zsh

	# Key bindings
	source $FZF_PATH/shell/key-bindings.zsh
	bindkey '^P' fzf-file-widget
	bindkey '^G' fzf-cd-widget

	if [[ $TERM_PROGRAM == iTerm.app ]]; then
		function config_fzf() {
			if [[ $1 == 'light' ]]; then
				export FZF_DEFAULT_OPTS=--color=light,bg+:7
			else
				export FZF_DEFAULT_OPTS=--color=dark,bg+:0
			fi
		}
		on_scheme_change+=config_fzf
	fi
fi

# direnv -- https://github.com/direnv/direnv #############################
#
eval "$(direnv hook $SHELL)"

# Prompt #################################################################

autoload -Uz promptinit && promptinit
prompt 'jason0x43'

# Line editor ############################################################

# Syntax highlighting -- load this *before* history-substring-search
if [[ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
	source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
	ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
fi

# History substring search
if [[ -f /usr/local/opt/zsh-history-substring-search/zsh-history-substring-search.zsh ]]; then
	source /usr/local/opt/zsh-history-substring-search/zsh-history-substring-search.zsh

	# Color for found substrings
	zstyle -s ':zconf:module:history-substring-search:color' \
		found \
		'HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND' \
		|| HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='bg=magenta,fg=white,bold'

	# Color for not-found substrings
	zstyle -s ':zconf:module:history-substring-search:color' \
		not-found \
		'HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND' \
		|| HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='bg=red,fg=white,bold'

	# Default globbing flags
	zstyle -s ':zconf:module:history-substring-search' \
		globbing-flags \
		'HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS' \
		|| HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS='i'

	# Check if case-sensitive is in the substring search style
	if zstyle -t ':zconf:module:history-substring-search' case-sensitive; then
	  HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS="${HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS//i}"
	fi

	# Check if color is disabled
	if ! zstyle -t ':zconf:module:history-substring-search' color; then
	  unset HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_{FOUND,NOT_FOUND}
	fi
fi

# autosuggest -- load this *after* history substring search
if [[ -f $DOTFILES/zsh/autosuggest ]]; then
	source $DOTFILES/zsh/autosuggest
	export AUTOSUGGESTION_ACCEPT_RIGHT_ARROW=1

	if [[ $TERM_PROGRAM == iTerm.app ]]; then
		function config_autosuggest() {
			if [[ $1 == 'light' ]]; then
				export AUTOSUGGESTION_HIGHLIGHT_COLOR=fg=14
			else
				export AUTOSUGGESTION_HIGHLIGHT_COLOR=fg=10
			fi
		}
		on_scheme_change+=config_autosuggest
	fi
fi

# Apply the proper color theme
if [[ $TERM_PROGRAM == iTerm.app ]]; then
	# If a termbg file exists, set the theme
	if [[ -e $termbg ]]; then
		# Use a case rather than eval so we don't execute random stuff
		case $(cat $termbg) in
			light) light;;
			dark) dark;;
		esac
	fi
fi

# vim:shiftwidth=4:tabstop=4:noexpandtab:foldmethod=marker
