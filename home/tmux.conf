# Basic config
# ---------------------------------------------------------------

set -g default-command "exec reattach-to-user-namespace -l $SHELL"

# Enable focus events for supporting terminals
set -g focus-events off

# Don't let apps change the window name
set -g allow-rename off

# Make the scrollback buffer huge
set -g history-limit 50000

# Make the repeat time a bit longer; this works best when the repeating command
# involves CTRL so that releasing CTRL ends the repetition
set -g repeat-time 1000

# Enable truecolor support
if "[[ $TERM_PROGRAM == iTerm.app ]]" "set -ga terminal-overrides ',xterm-256color:Tc'" ""

# Enable custom cursor support
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# Lower escape timing for quicker response to scroll-buffer access
set -gs escape-time 0

# Keep transient things around longer
set -g display-time 4000
set -g display-panes-time 4000

# Allow tmux to process hex codes sent by iTerm
set -g assume-paste-time 0

# Copy current value of TERM_PROGRAM into environment
set -ga update-environment ' TERM_PROGRAM'

# Key bindings
# ---------------------------------------------------------------
# Vi bindings for everything
set -g status-keys vi
set -g mode-keys vi

# Change the prefix to C-s
unbind-key C-b
set -g prefix C-s

# Unbind all the arrow keys since we're using vi bindings
unbind Left
unbind Down
unbind Up
unbind Right

unbind %
unbind '"'

bind s send-prefix
bind t choose-tree

# Reload the config
bind R run -b ' \
  tmux source-file ~/.tmux.conf > /dev/null; \
  tmux display-message "Sourced .tmux.conf!"'

# Copy and paste
bind p run "reattach-to-user-namespace pbpaste | tmux load-buffer -; tmux paste-buffer"
bind c copy-mode
bind -Tcopy-mode-vi 'v' send -X begin-selection
bind -Tcopy-mode-vi 'y' send -X copy-pipe-and-cancel "tmux save-buffer - | reattach-to-user-namespace pbcopy"

# Basic navigation
bind [ previous-window
bind ] next-window

# Pane splitting
bind "|" split-window -h -c "#{pane_current_path}"
bind "-" split-window -v -c "#{pane_current_path}"
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
bind -r Space next-layout

# Ask before killing a window
unbind C-d
bind -n C-d confirm-before -p "kill-pane #P? (y/n)" kill-pane

# Respawn a pane (helpful when executables have moved, as during update_all)
bind r respawn-pane -k

# Window movement
bind -r "<" swap-window -t -1
bind -r ">" swap-window -t +1

# Automatically renumber windows
set -g renumber-windows on

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Create new windows (like Cmd-T to create new tabs)
bind -n C-t new-window -a -c "#{pane_current_path}"

# Mouse mode
set -g mouse on

# Use a fancy screen terminal if we're using a fancy xterm
if "[[ $TERM == xterm-256color ]]" "set -g default-terminal 'screen-256color'" ""
if "[[ $TERM == xterm-256color-italic ]]" "set -g default-terminal 'screen-256color-italic'" ""

# Status bar
# ---------------------------------------------------------------
# Update the status bar every few seconds
set -g status-interval 5

# <host> .... <windows> .... <info>
set -g status-left ' #h '
set -g status-left-length 30
set -g window-status-format ' #I:#W '
set -g window-status-current-format ' #I:#W '
set -g status-right '%m/%d | %H:%M '
set -g status-justify centre

# statusbar colors
set -g status-style 'bg=colour14,fg=colour15' # base1 and base3
set -g window-status-style 'bg=default,fg=default'
set -g window-status-current-style 'bg=colour10'

# window styles
set -g window-style 'bg=colour7,fg=colour14'
set -g window-active-style 'bg=colour15,fg=colour11'
set -g pane-border-style 'bg=colour7,fg=colour14'
set -g pane-active-border-style 'bg=colour7,fg=colour14'

# message text
set -g message-bg colour7 #base2
set -g message-fg colour9 #orange

# pane number display
set -g display-panes-active-colour colour4 #blue
set -g display-panes-colour colour9 #orange

# clock
set -g clock-mode-colour colour2 #green

# Tmux plugins
# ---------------------------------------------------------------
set-environment -g TMUX_PLUGIN_MANAGER_PATH "$DOTFILES/tmux/plugins"
set -g status-right '#{battery_icon} #{battery_percentage} | %m/%d | %H:%M '
set -g @batt_discharging_icon '▽'
set -g @batt_charged_icon ' '
set -g @batt_charging_icon '△'
set -g @resurrect-dir "$CACHEDIR/tmux/resurrect"
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'
set -g @resurrect-capture-pane-contents 'on'

run $DOTFILES/tmux/plugins/tpm/tpm

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-resurrect'
