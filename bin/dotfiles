#!/bin/zsh

autoload colors; colors

source $HOME/.dotfiles/zsh/common.zsh

setopt null_glob

typeset -U path
path=(
    $HOMEBREW_BASE/bin
    $path
)

# Log output
function log {
    local msg=$1
    local color=${2:-$fg_bold[green]}
    echo "$color>>>$reset_color $fg_bold[white]$msg$reset_color"
}

# Log output
function logSub {
    log $1 $fg_bold[blue]
}

# Log error output
function err {
    log $1 $fg_bold[red]
}

# Create a directory
function makedir {
    if [[ ! -d $1 ]]; then
        mkdir -p $1
        logSub "Created $1/"
    fi
}

# Create a symlink
function link {
    if [[ ! -r $2 ]]; then
        ln -s $1 $2
        logSub "Linked $1 -> $2"
    fi
}

# Fix terminal config
function fixterm {
    if [[ $TERM == "xterm-kitty" && $(uname -s) == "Darwin" && ! -d $HOME/.terminfo/78/xterm-kitty ]]; then
        local tmpfile=$(mktemp /tmp/dotfiles.XXXXXX)
        infocmp xterm-kitty > $tmpfile
        tic -x -o $HOME/.terminfo $tmpfile &> /dev/null
        rm $tmpfile
    fi

    # Fix terminal definition so C-H works properly in neovim
    kbs=$(infocmp $TERM | grep -o 'kbs=[^,]\+')
    if [[ $kbs =~ "kbs=^[hH]" ]]; then
        logSub "Fixing backspace code in terminfo..."
        infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > /tmp/$TERM.ti
        tic /tmp/$TERM.ti
        rm /tmp/$TERM.ti
    fi
}

# Check if a command exists
function checkcmd {
	local cmd=$1
	local required=$2
	if (( ! $+commands[$cmd] )); then
		print -P "%F{red}$cmd is missing%f"
        if [[ $required == "1" ]]; then
            exit 1
        fi
	fi
}

# Basic health check
function dotfiles-health {
    local os=$(uname)

    checkcmd asdf 1
    checkcmd tmux

    if [[ $os == "Linux" ]]; then
        checkcmd unzip 1
        checkcmd xclip
    fi
}

# Rebuild bat cache
function dotfiles-bat {
    if (( ! $+commands[bat] )); then
      log "Skipping bat cache update"
      return
    fi
    log "Rebuilding bat cache..."
    local out=$(bat cache --build 2>&1)
    if (( $? != 0 )); then
        err "Error rebuilding bat cache"
        err $out
    fi
}

# Link dotfiles into $HOME, update terminfo
function dotfiles-home {
    log "Updating home directory files..."

    # Remove broken links
    for f in $HOME/.*(@) $CONFIGDIR/*(@); do
        if [[ ! -e $f ]]; then
            rm $f
            logSub "Removed $f"
        fi
    done

    for f in $DOTFILES/home/*(.); do
        link $f $HOME/.$f:t
    done

    for f in $DOTFILES/config/*; do
        link $f $CONFIGDIR/$f:t
    done

    makedir $CACHEDIR/tmux/resurrect
    makedir $CACHEDIR/zsh
    makedir $CACHEDIR/direnv/allow

    makedir $CONFIGDIR

    # Fix the terminal definition so that C-H works properly in neovim. This
    # function may also need to be run for the tmux terminal type.
    fixterm
}

# Link and activate launchd scripts
function dotfiles-launchd {
    log "Linking and bootstrapping launchd scripts..."

    for f in $DOTFILES/launchd/*; do
        if [[ ! -h $HOME/Library/LaunchAgents/$f:t ]]; then
            link $f $HOME/Library/LaunchAgents/$f:t
            launchctl bootstrap gui/$UID $HOME/Library/LaunchAgents/$f:t
            logSub "Bootstrapped $f:t"
        fi
    done
}

# Install homebrew and core packages, update packages
function dotfiles-brew {
    if [[ ! -w $HOMEBREW_BASE/bin ]]; then
        log "Skipping homebrew update (no write permissions)"
        return
    fi

    log "Updating brew packages..."

    if [[ $OSTYPE == linux* ]]; then
        if (( ! $+commands[git] )) || (( ! $+commands[gcc] )) || (( ! $+commands[curl] )); then
            logSub "Installing system requirements..."
            sudo apt-get update
            sudo apt-get install -y build-essential curl file git || true
        fi
    fi

    if ! hash brew; then
        logSub "Installing homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

        # If homebrew was just installed, ensure it's in the path
        export PATH=$HOMEBREW_BASE/bin:$PATH

        rehash
    fi

    logSub "Checking for missing brew packages..."
    brew_packages=(
        'bash'        # update from system stock version
        'git'         # update from system stock git
        'git-delta'   # prettier git diffs
        'python@3.9'  # use Python3 (update to just 'python' when possible)
        'tig'         # terminal git ui
        'tmux'        # terminal manager
        'zsh'         # newer zsh
    )

    local installed_packages=($(brew ls --versions $brew_packages | awk '{ print $1 }'))

    for pkg in $brew_packages; do
        if ((! $installed_packages[(Ie)$pkg])); then
            logSub "Installing $pkg..."
            brew install $pkg
        fi
    done

    logSub "Updating installed brew packages..."
    brew upgrade

    # Remove git's included zsh completions in favor of the system completions
    if [[ -f $HOMEBREW_BASE/share/zsh/site-functions/_git ]]; then
        rm -f $HOMEBREW_BASE/share/zsh/site-functions/_git
    fi
}

# Update zsh plugins
function dotfiles-zsh {
    log "Updating zsh plugins..."

    if [[ -z $ZPLUGDIR ]]; then
        err "ZPLUGDIR not defined"
        return
    fi

    local out=""
    local head=""

    for plugin in $ZPLUGDIR/*/*; do
        head=$(git -C $plugin rev-parse HEAD)
        out=$(git -C $plugin pull -q --recurse-submodules 2>&1)
        if (( $? != 0 )); then
            err "Error updating ${plugin}"
            err $out
            continue
        fi
        out=$(git -C $plugin submodule update --remote 2>& 1)
        if (( $? != 0 )); then
            err "Error updating ${plugin}"
            err $out
            continue
        fi
        if [[ $(git -C $plugin rev-parse HEAD) != $head ]]; then 
            logSub "Updated ${plugin:h:t}/${plugin:t}"
        fi
    done
}

# Update global python packages
function dotfiles-python {
    if [[ ! -w $HOMEBREW_BASE/bin ]]; then
        log "Skipping python update (no write permissions)"
        return
    fi

    if [[ ! -h $HOMEBREW_BASE/bin/python ]]; then
        logSub "Creating python link..."
        link $HOMEBREW_BASE/bin/python3 $HOMEBREW_BASE/bin/python
    fi

    log "Updating global python packages..."
    $HOMEBREW_BASE/bin/pip3 install -U pip setuptools pynvim neovim-remote > /dev/null

    if [[ ! -d $HOME/.poetry ]]; then
        log "Installing poetry..."
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
    else
        log "Updating poetry..."
        $HOME/.poetry/bin/poetry self update
    fi

    log "Updating poetry completions..."
    $HOME/.poetry/bin/poetry completions zsh > $ZCOMPDIR/_poetry
}

# Update global npm packages
function dotfiles-node {
    if [[ ! -w $HOMEBREW_BASE/bin ]]; then
        log "Skipping node update (no write permissions)"
        return
    fi

    local node_path=$1
    if [[ -z $node_path ]]; then
        log "Updating global node packages..."
        node_path=$HOMEBREW_BASE/bin
    fi

    # if a node_path was provided, the function was called from another
    # function, so don't print the top-level message
    if [[ ! -x $node_path/npm ]]; then
        err "No npm executable"
        return
    fi

    # get list of outdated global packages
    local mods=($($node_path/npm --registry=https://registry.npmjs.org outdated -g --parseable))
    for mod in $mods; do
        # extract current and latest fields
        array=(${(@s/:/)mod})
        currentPkg=$array[3]
        latestPkg=$array[4]

        # extract current and latest versions, minus any prerelease tags
        currentVerParts=(${(@s/@/)currentPkg})
        currentVer=$currentVerParts[2]
        latestVerParts=(${(@s/@/)latestPkg})
        latestVer=$latestVerParts[2]

        if [[ $latestVer == 'linked' ]]; then
            logSub "Skipping $latestPkg"
            continue
        fi

        # read versions into arrays
        current=(${(@s/./)currentVer})
        latest=(${(@s/./)latestVer})

        # if latest is newer than current, install latest
        if (( latest[1] > current[1] )) || {
            (( latest[1] == current[1] )) &&
            (( latest[2] > current[2] )) || {
                (( latest[1] == current[1] )) &&
                (( latest[2] == current[2] )) &&
                (( latest[3] > current[3] ));
            };
        }; then
            $node_path/npm install --registry=https://registry.npmjs.org --progress=false -g $latestPkg > /dev/null
            logSub "Installed $latestPkg"
        fi
    done
}

# Update tmux plugins
function dotfiles-tmux {
    log "Updating tmux plugins..."

    if [[ -z $TMUX_PLUGIN_MANAGER_PATH ]]; then
        err "TMUX_PLUGIN_MANAGER_PATH not defined"
        return
    fi

    if [[ -d $TMUX_PLUGIN_MANAGER_PATH/tpm ]]; then
        $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins > /dev/null 2>&1
    fi

    if [[ -d $TMUX_PLUGIN_MANAGER_PATH ]]; then
        for plugin in $TMUX_PLUGIN_MANAGER_PATH/*; do
            head=$(git -C $plugin rev-parse HEAD)
            git -C $plugin pull -q --recurse-submodules > /dev/null
            if (( $? != 0 )); then
                err "Error updating $plugin"
                continue
            fi
            git -C $plugin submodule update --remote -q
            if (( $? != 0 )); then
                err "Error updating $plugin"
                continue
            fi
            if [[ $(git -C $plugin rev-parse HEAD) != $head ]]; then 
                logSub "Updated ${plugin:t}"
            fi
        done
    fi
}

# Update asdf plugins
function dotfiles-asdf {
    if (( ! $+commands[asdf] )); then
        log "Skipping asdf update"
        return
    fi

    log "Updating asdf..."

    local asdf_desired=(
        bat
        direnv
        fd
        neovim
        ripgrep
    )
    local asdf_plugins=(${(@f)$(asdf plugin-list)})

    for plugin in $asdf_desired; do
        if (( ! $asdf_plugins[(Ie)$plugin] )); then
            asdf plugin add $plugin > /dev/null
            logSub "Installed $plugin plugin"
        fi
    done

    for plugin in $(asdf plugin list); do
        local version=$(asdf current $plugin 2> /dev/null)
        if [[ -z $version ]]; then
            local versions=($(asdf list $plugin))
            version=$(echo $versions[-1] | awk '{ print $1 }')
        else
            version=$(echo $version | awk '{ print $2 }')
        fi

        if [[ $version != 'nightly' ]]; then
            local latest=$(asdf latest $plugin)
            if [[ -n $latest && $version != $latest ]]; then
                logSub "Updating $plugin..."
                asdf plugin update $plugin > /dev/null
                asdf install $plugin latest > /dev/null
                asdf global $plugin $version
            fi
        fi

        logSub "Using $plugin $version"
    done
}

cd $HOME

if [[ -n $1 ]]; then
    if [[ $1 == -h || $1 == --help ]]; then
        echo 'usage: dotfiles [-h | --help | <group>]'
        echo
        echo 'Update local environment. All groups are updated by default.'
        echo
        echo 'Options:'
        echo '    -h, --help     Show this help message'
        echo '    <group>        A group to update'
        echo
        echo 'Available groups:'
        echo '    asdf           Update asdf plugins, install defaults'
        echo '    bat            Rebuild bat theme and filetype cache'
        echo '    brew           Update brew packages, install defaults'
        echo '    home           Update dotfiles and home directories, fixup terminfo database'
        echo '    launchd        Link and bootstrap launchd scripts'
        echo '    node           Update global node packages, install defaults'
        echo '    python         Update global python packages, install defaults'
        echo '    tmux           Update tpm packages'
        echo '    vim            Update vim plugins'
        echo '    zsh            Update zsh plugins'
    elif [[ $1 == -* ]]; then
        echo "Unknown option $1"
        exit 1
    else
        dotfiles-$1
        log "Done"
    fi
else
    dotfiles-health
    dotfiles-home
    dotfiles-brew

    dotfiles-zsh
    dotfiles-asdf
    dotfiles-python
    dotfiles-node
    dotfiles-tmux
    dotfiles-bat

    if [[ $OSTYPE == darwin* ]]; then
        dotfiles-launchd
    fi

    log "Done"
fi
